# Entity Component System Framework

## Overview
The genetic algorithm cell simulation system combines evolutionary computation with cellular simulation. It utilizes an Entity Component System (ECS) architecture to model complex genetic and spatial interactions between cell entities. The key components are:

- Genetic System: Implements a binary gender reproduction system with maternal, paternal, and fraternal lineages. Tracks fitness based on a target norm of (127,127,127) in RGB color space. Drives evolution through generational cycles with extinction events. 

- Spatial Processing System: Utilizes quaternion mathematics via a weighted 3x3 matrix for precise 3D movement (forward/backward, left/right, up/down) with center point resistance. Enables smooth navigation and spatial interactions.

- Cell Behavior System: Models cell functions like movement, health management, and resource processing. Incorporates strategic decision-making for optimizing survival based on energy levels and environmental factors.

- Color Processing System: Implements both additive (RGB) and subtractive (CMY) color models for fine-grained control over phenotype expression of genetic traits.

- Integration Components: Connect the various systems together for emergence of complex adaptive behavior. For example, mapping repair functions to energy costs, managing resource recycling, and optimizing movement based on energy levels.

## ECS Architecture 
The ECS architecture separates entities (cells), components (attributes and behaviors), and systems (genetic, spatial, resource).

### Key Entities
- Genetic Cell: The primary evolving agent with hereditary traits
- Particle: A point in the optimization space guiding evolution
- Environment: The spatial and resource context for cells

### Component Categories
- Genetic: Genotype, color, mutation rates, fitness scores, heredity
- Spatial: Position, rotation, movement weights, swarm behaviors
- Behavior: Health, energy, resources, functions, state transitions

### System Orchestration
- Time Management: Delta time, generation cycles, epoch tracking
- Genetics: Reproduction, mutation, fitness evaluation, population tracking
- Movement: Spatial transforms, boundary and collision handling
- Resources: Acquisition, consumption, recycling, distribution

## Genetic Framework
The genetic framework focuses on evolving cell genotypes towards a fitness norm of (127,127,127) in RGB space. Key elements:

- Fitness-based selection using weighted pathways (maternal, paternal, fraternal)
- Generational evolution with extinction events for selection pressure 
- Gene-to-phenotype mapping through color space models (RGB/CMY)
- Trait inheritance and diversity through crossover and mutation

### Fitness Architecture
- Fitness score normalization targeting (127,127,127)
- Fitness-based genetic selection and evolution
- Familial inheritance pathways through maternal and paternal lines
- Fraternal diversity generation for phenotype expression
- Gene-to-fitness mapping via spatial coordinates (X,Y,Z)

### Color Processing System 
- Additive color model implementation (RGB)
  - Red channel value processing
  - Green channel value processing
  - Blue channel value processing
- Subtractive color model implementation (CMY)
  - Cyan channel calculations
  - Magenta channel calculations
  - Yellow channel calculations

## Spatial Framework 
The spatial framework enables cells to navigate and interact in 3D space using quaternion mathematics:

- Weighted 3x3 movement matrix (forward/back, left/right, up/down) 
- Center point resistance simulating movement inertia
- Rotation and translation operations for smooth motion
- Boundary and collision management for spatial constraints

### Movement Mathematics
- Quaternion-based 3Ã—3 matrix system
- Forward/Backward movement weighting (1/30)
- Left/Right movement weighting (1/12)
- Up/Down movement weighting (1/12)
- Center point resistance (-4/9)

### Spatial Processing
- Vector-based directional control
- Quaternion rotation calculations
- Position matrix operations
- Center point normalization
- Movement boundary enforcement

## Behavior System
Cell behavior emerges from the interaction of genetic, spatial, and resource components:

- Core Functions: Movement, health management, resource processing
- Resource Management: Energy acquisition, storage, expenditure 
- State-based Decisions: Movement strategies, repair prioritization 

The Behavior System connects genetics, space, and resources - enabling cells to adapt, survive, and evolve in the simulation environment based on their inherited traits and learned strategies.

## Integration 
The various architectural components integrate to create a unified, evolvable system:

- Function costs mapped to energy requirements and health impacts
- Spatial position influencing resource access and social interactions
- Sensory inputs and behavior outputs connected via state controllers
- Cyclic flows between resources, movement, health, and genetics
- Particle swarm optimization guiding evolutionary trajectories

This integrated architecture allows the genetic algorithm and cellular automata to form a synergistic system capable of modeling biological evolution, physical embodiment, and adaptive behavior. The ECS approach provides flexibility to extend the system with new component types and emergent interaction patterns.

## Core Framework

### Registry Management
- Primary entity tracker for genetic cells
- Component registry for attributes and behaviors 
- System coordinator for genetic and spatial operations
- State handler for environment conditions
- Global constants controller (fitness norms, mutation rates)

### Entity Management
- Genetic cell entities as primary actors
- Lineage tracking through maternal/paternal lines
- Fraternal pathway handlers
- Fitness score computation and tracking 
- Lifecycle state management
- Particle swarm behaviors and local optimization

### Component Categories

#### Genetic Components
- Genotype storage and expression
- Color space handlers (RGB/CMY)
- Mutation rate controllers
- Fitness calculation matrices
- Heredity trackers
- Time-dependent trait expression

#### Spatial Components  
- Quaternion mathematics system
- Movement weight matrices (3x3)
- Directional control systems
- Center point resistance
- Position state management
- Swarm position optimization

#### Behavior Components
- Health and energy systems
- Resource processing
- Rotation handlers
- Function mappings
- State transitions
- Delta time scaling

### System Orchestration

#### Time Management Systems
- Delta time calculation and scaling
- Epoch boundary detection
- Generation cycle management
- Optimization step timing
- Particle velocity updates
- Swarm synchronization

#### Genetic Systems
- Inheritance processing
- Fitness evaluation
- Color space operations
- Mutation handling
- Population dynamics
- Time-based selection pressure

#### Movement Systems
- Spatial calculations
- Quaternion rotations
- Position updates
- Boundary management
- Collision detection
- Swarm behavior coordination

#### Resource Systems
- Energy distribution
- Health management
- Resource consumption
- Waste processing
- State updates
- Time-scaled metabolism

## Base Primitives

### Registry
- EntityManager
- ComponentManager
- SystemManager
- StateManager
- DecisionTree
- EventBus
- LogManager
- GenotypeSchema
- PhenotypeSchema

### Entity Core
- UUID generation/management
- Component container
- Metadata dictionary
- Tag container
- Lifecycle states
- Entity pools

### Component Interface
- TypeVar constraints
- Dataclass base
- Slots configuration
- State validation
- Default factories
- World Globals
- State Publics
- Entity Privates
- Component Hiddens

### System Interface
- Update cycle
- Query interface
- Fitness Function
- State Management
- Dependency injection
- Priority handling

## Data Structures

### Component Storage
- Type-safe containers
- Slot optimization
- Shelf management
- Memory pools
- Component maps

### Iterators/Generators
- Component iterators
- Entity filters
- System cascades
- Event streams
- Query results

### Event System
- Message queue
- Event filters
- Priority queue
- Observer patterns
- Event pools

## Implementation Classes

### Base Manager
```python
@dataclass(slots=True)
class Manager:
    entities: Dict[UUID, Set[Type]]
    components: Dict[Type, Dict[UUID, Any]]
    systems: Dict[Type, Set[UUID]]
```

### Entity Container
```python
@dataclass(slots=True)
class Entity:
    id: UUID
    components: Set[Type]
    tags: Set[str]
    state: EntityState
```

### Component Base
```python
@dataclass(slots=True)
class Component:
    owner: UUID
    state: ComponentState
    data: Any
```

### System Base
```python
@dataclass(slots=True)
class System:
    priority: int
    queries: Set[Type]
    dependencies: Set[Type]
```

## Implementation Strategy

### Time-Based Processing
- Epoch management for genetic algorithms
- Delta time scaling for movement
- Generation boundaries and transitions
- Optimization cycle timing
- Swarm update synchronization
- Resource metabolism timing

### Data Flow
- Entity state updates
- Component synchronization
- System priority handling
- Event propagation
- Resource management
- Temporal state tracking

### State Management
- Environment conditions
- Population metrics
- Resource availability
- Fitness landscapes
- System parameters
- Time-series optimization

### Event Handling
- Reproduction triggers
- Mutation events
- Selection pressures
- Resource distribution
- State transitions
- Epoch boundaries

## Extension Points

### Genetic Modularity
- New trait implementations
- Fitness function variants
- Mutation strategy patterns
- Selection pressure systems
- Heredity mechanisms
- Temporal adaptation rates
- Genotype container
- Phenotype expression
- Mutation handlers
- Crossover operators

### Cell Extension  
- Health/Energy tracking
- Movement systems
- Resource management
- Spatial operations

### Spatial Extensions
- Movement pattern variants
- Interaction spaces
- Boundary conditions
- Position constraints
- Field effects
- Swarm optimization patterns

### Behavior Patterns
- Decision trees
- Resource strategies
- Interaction protocols
- State machines
- Action sequences
- Time-based decision making

### Particle Swarm Integration
- Local optimization behaviors
- Global fitness targeting
- Velocity and position updates
- Information sharing protocols
- Swarm coherence maintenance
- Time-scaled movement patterns

This architecture supports:
- Complex genetic algorithms
- Spatial mathematics operations
- Resource-based evolution
- Population dynamics
- Emergent behaviors
- Temporal optimization
- Particle swarm behavior
- Agent-based modeling

---

## Cell Behavior System

### Core Functions
1. Digestion processing
2. Food resource handling
3. Removal operations
4. Waste management
5. Repair functionality
6. Health monitoring
7. Rotation control
8. X-axis operations
9. Y-axis operations
10. Z-axis operations
11. Additive processing
12. Subtractive processing

### Resource Management
- Health repair pathways
- Energy expenditure tracking
- Energy consumption calculations
- Resource recycling system
- Function-based energy costs

### Cell Operations
- Health component management
- Energy distribution system
- Movement coordination
- State transition handling
- Resource optimization

## Integration Components

### Function Integration
- Health repair to energy cost mapping
- Movement to energy consumption ratios
- Resource recycling pathways
- State-dependent function costs
- Operation priority management

### Behavioral Loops
- Repair/Energy feedback cycle
- Consumption/Movement dependencies
- Resource/Waste recycling
- Health/Function relationships
- Energy/Movement optimization